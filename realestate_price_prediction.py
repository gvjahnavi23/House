# -*- coding: utf-8 -*-
"""Realestate_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kggtkJnIiMMhq7euiUIbBBuZelwcqzSl
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("/content/bengaluru_house_prices.csv")
df.head(10)
df.shape

df.isnull().sum()

df2=df.dropna()
df2.shape

df3=df2.drop(['area_type','availability','society','balcony'],axis='columns')
df3.head()

df3['bhk']=df3['size'].apply(lambda x:int(x.split(' ')[0]))
df3.head(5)

def to_fix(x):
  t=x.split('-')
  if len(t)==2:
    return (float(t[0])+float(t[1]))/2
  try:
    return float(x)
  except:
    return None

df4=df3.copy()
df4['total_sqft']=df4['total_sqft'].apply(to_fix)
df4=df4.drop(['size'],axis='columns')
df4

df4['price_sqft']=df4['price']*100000/df4['total_sqft']
df4.head(7)

df4.location=df4.location.apply(lambda x:x.strip())
location_stats=df4.groupby('location')['location'].agg('count').sort_values(ascending=False)
loc_stats_lessthan_10=location_stats[location_stats<=10]
df4.location=df4.location.apply(lambda x:'other' if x in loc_stats_lessthan_10 else x )
df4.head(15)

df4=df4[~(df4.total_sqft/df4.bhk<300)]
df4.shape

def remove_out(df):
  df_out=pd.DataFrame()
  for key,subdf in df.groupby('location'):
    m=np.mean(subdf.price_sqft)
    st=np.std(subdf.price_sqft)
    reduced_df=subdf[((subdf.price_sqft)>(m-st)) & ((subdf.price_sqft)<=(m+st))]
    df_out=pd.concat([df_out,reduced_df],ignore_index=True)
  return df_out

df4=remove_out(df4)
df4.shape

def remove_bhk_outliers (df):
      exclude_indices= np.array([])
      for location, location_df in df.groupby("location"):
          bhk_stats={}
          for bhk, bhk_df in location_df.groupby("bhk"):
              bhk_stats[bhk] = {
                  "mean": np.mean(bhk_df.price_sqft),
                  'std': np.std(bhk_df.price_sqft),
                  "count": bhk_df.shape [0]
              }
          for bhk, bhk_df in location_df.groupby("bhk"):
              stats = bhk_stats.get(bhk-1)
              if stats and stats["count"]>5:
                 exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_sqft<(stats['mean'])].index.values)
      return df.drop(exclude_indices,axis='index')
df4=remove_bhk_outliers(df4)
df4.shape

#removing flats which have bathrooms more than rooms+2
df4=df4[df4.bath<df4.bhk+2]
df4.shape

df4=df4.drop(['price_sqft'],axis='columns')
df4.head()

dummies = pd.get_dummies(df4.location)
dummies.head()

df5 = pd.concat([df4,dummies.drop('other',axis='columns')],axis='columns')
df5=df5.drop('location',axis='columns')
df5.head()

#X is independent data set
X = df5.drop('price',axis='columns')
X.shape

y = df5.price
y.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train,y_train)
lr.score(X_test,y_test)

def predict_price(location,sqft,bath,bhk):
  loc_index = np.where(X.columns==location)[0][0]
  x = np.zeros(len(X.columns))
  x[0] = sqft
  x[1] = bath
  x[2] = bhk
  if loc_index >= 0:
    x[loc_index] = 1
  return lr.predict([x])[0]

predict_price('Ambalipura',1200,2,3)*100000

import pickle
with open('Realestate_price_prediction.pickle','wb') as f:
  pickle.dump(lr,f)

import json
columns = {
    'data_columns' : [col.lower() for col in X.columns]
}
with open('columns.json','w') as f:
  f.write(json.dumps(columns))